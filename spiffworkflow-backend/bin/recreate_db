#!/usr/bin/env bash

function error_handler() {
  echo >&2 "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

export FLASK_SESSION_SECRET_KEY="this_is_recreate_db_secret_key"

if [[ -z "${SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR:-}" ]]; then
  script_dir="$(
    cd -- "$(dirname "$0")" >/dev/null 2>&1
    pwd -P
  )"

  SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR="${script_dir}/../../../sample-process-models"
  if [[ ! -d "$SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR" ]]; then
    SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR="${script_dir}/../../sample-process-models"
    if [[ ! -d "$SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR" ]]; then
      echo >&2 "ERROR: Could not find a location for the sample processes. Last tried: $SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR"
      exit 1
    fi
  fi
  export SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR
fi

if [[ -n "${SPIFFWORKFLOW_BACKEND_ENV:-}" ]] && ! grep -Eq '^(local_development|unit_testing)$' <<<"$SPIFFWORKFLOW_BACKEND_ENV"; then
  echo >&2 "ERROR: SPIFFWORKFLOW_BACKEND_ENV is set to '${SPIFFWORKFLOW_BACKEND_ENV}'. Only local_development and unit_testing are allowed."
  exit 1
fi

database_host="localhost"
database_port=""
database_username="root"
database_password=""
databases_to_run_on="spiffworkflow_backend_local_development spiffworkflow_backend_unit_testing"
database_name_from_uri=""
if [[ -n "${SPIFFWORKFLOW_BACKEND_DATABASE_URI:-}" ]]; then
  database_host_and_port=$(grep -oP "^[^:]+://.*@\K(.+?)[/]" <<<"$SPIFFWORKFLOW_BACKEND_DATABASE_URI" | sed -E 's/[\/]$//')
  database_host=$(awk -F ':' '{print $1}' <<<"$database_host_and_port")
  database_port=$(awk -F ':' '{print $2}' <<<"$database_host_and_port")
  database_username_and_password=$(grep -oP "^[^:]+://\K([^@]+)[@]" <<<"$SPIFFWORKFLOW_BACKEND_DATABASE_URI" | sed -E 's/[@]$//')
  database_username=$(awk -F ':' '{print $1}' <<<"$database_username_and_password")
  database_password=$(awk -F ':' '{print $2}' <<<"$database_username_and_password")
  database_name_from_uri=$(grep -oP "/\K(\w+)$" <<<"$SPIFFWORKFLOW_BACKEND_DATABASE_URI")
  if ! grep "\<$database_name_from_uri\>" <<<"$databases_to_run_on"; then
    databases_to_run_on="$database_name_from_uri"
  fi
fi

database_host_args="-h $database_host -u $database_username"
if [[ -n "$database_port" ]]; then
  database_host_args="${database_host_args} -P${database_port}"
fi
if [[ -n "$database_password" ]]; then
  database_host_args="${database_host_args} -p${database_password}"
fi

# uncomment this line to fix branching conflicts
# poetry run flask db merge heads -m "merging heads"

function run_command_on_mysql_databases {
  local command="$1"
  for database_name in $databases_to_run_on; do
    mysql $database_host_args -e "$command $database_name"
  done
}

tasks=""
if [[ "${1:-}" == "clean" ]]; then
  subcommand="${2:-}"
  if [[ "$subcommand" == "rmall" ]]; then
    tasks="$tasks init migrate"
    rm -rf migrations/
  elif [[ -n "$subcommand" ]]; then
    echo >&2 "ERROR: you passed a subcommand that was not rmall, and that is not supported: $subcommand"
    exit 1
  fi

  if [[ "${SPIFFWORKFLOW_BACKEND_DATABASE_TYPE:-mysql}" == "sqlite" ]]; then
    rm -f ./src/instance/*.sqlite3
  elif [[ "${SPIFFWORKFLOW_BACKEND_DATABASE_TYPE:-mysql}" == "mysql" ]]; then
    run_command_on_mysql_databases "DROP DATABASE IF EXISTS"
  elif [[ "${SPIFFWORKFLOW_BACKEND_DATABASE_TYPE:-}" == "postgres" ]]; then
    # TODO: check to see if the db already exists and we can connect to it. also actually clean it up.
    # start postgres in background with one db
    container_name="postgres-spiff"
    container_regex="^postgres-spiff$"
    if [[ -n "$(docker ps -qa -f name=$container_regex)" ]]; then
      echo ":: Found postgres container - $container_name"
      if [[ -n "$(docker ps -q -f name=$container_regex)" ]]; then
        echo ":: Stopping running container - $container_name"
        docker stop $container_name
      fi
      echo ":: Removing stopped container - $container_name"
      docker rm $container_name
    fi
    if ! docker exec -it postgres-spiff psql -U spiffworkflow_backend spiffworkflow_backend_unit_testing -c "select 1"; then
      docker run --name postgres-spiff -p 5432:5432 -e POSTGRES_PASSWORD=spiffworkflow_backend -e POSTGRES_USER=spiffworkflow_backend -e POSTGRES_DB=spiffworkflow_backend_unit_testing -d postgres
      sleep 4 # classy
    fi
    if ! docker exec -it postgres-spiff psql -U spiffworkflow_backend spiffworkflow_backend_local_development -c "select 1"; then
      # create other db. spiffworkflow_backend_unit_testing came with the docker run.
      docker exec -it postgres-spiff psql -U spiffworkflow_backend spiffworkflow_backend_unit_testing -c "create database spiffworkflow_backend_local_development;"
    fi
  fi
  tasks="$tasks upgrade"
elif [[ "${1:-}" == "migrate" ]]; then
  tasks="$tasks migrate upgrade"
elif [[ "${1:-}" == "downgrade" ]]; then
  tasks="$tasks downgrade"
else
  tasks="$tasks upgrade"
fi

if [[ "${SPIFFWORKFLOW_BACKEND_DATABASE_TYPE:-mysql}" == "mysql" ]]; then
  run_command_on_mysql_databases "CREATE DATABASE IF NOT EXISTS"
fi

for task in $tasks; do
  SPIFFWORKFLOW_BACKEND_ENV=local_development FLASK_APP=src/spiffworkflow_backend poetry run flask db "$task"
done

if [[ -z "$database_name_from_uri" ]] || [[ "$database_name_from_uri" == "spiffworkflow_backend_local_development" ]]; then
  hacked_up_uri=$(sed -E 's/spiffworkflow_backend_local_development$/spiffworkflow_backend_unit_testing/' <<<"${SPIFFWORKFLOW_BACKEND_DATABASE_URI:-}")
  SPIFFWORKFLOW_BACKEND_DATABASE_URI="$hacked_up_uri" SPIFFWORKFLOW_BACKEND_ENV=unit_testing FLASK_APP=src/spiffworkflow_backend poetry run flask db upgrade
fi

# for ./bin/tests-par (parallel tests with xdist)
if [[ -f "./src/instance/db_unit_testing.sqlite3" ]]; then
  for i in $(seq 0 16); do
    cp ./src/instance/db_unit_testing.sqlite3 ./src/instance/db_unit_testing_gw$i.sqlite3
  done
fi
