{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/OR",
              "name": "OR",
              "shortDescription": {
                "text": "Open Redirect"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nAn open redirect attack takes place when a web application redirects the user to an unauthorized and untrusted site. In general, URL redirection refers to the ability of a website or application to redirect users to another site. This is often a benign and useful feature. For example, if a resource has moved to a new location, URL redirection can transfer the user to that location rather than displaying an error message.\nHowever, this ability can be exploited through social engineering, tricking the user into believing they are accessing one site when, in reality, they are being redirected to a dangerous site, such as a phishing site. Once there, the user may be further tricked into entering credentials or personally identifiable information (PII), believing they are still within the original, trusted domain. Attackers can then use these credentials to gain unauthorized access or leverage the user's PII for sale or ransom.\n\n## Best practices for prevention\n* When developing a site or web app, consider implementing a disclaimer page to remind users that they are leaving a secure site.\n* Adopt a zero-trust approach in which all input is treated with suspicion.\n* Validate all input against deny-lists to ensure it does not contain code to redirect the user. This method is good but inherently incomplete.\n* Be aware of all sources of untrusted input being sent to the server that could be used to redirect the user, such as cookies, URL components, filenames, query results, request headers, and more.\n* In particular, be aware of potential API calls that could send input indirectly to redirect the user.\n* To protect end users, use a firewall to block known malicious sites, train users to recognize basic signs of a phishing attack, and ensure that all network endpoints are patched with the most current updates.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "OR",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/lanius/heso/commit/20f397f1c4b8e1a481952413f33ad31aa5274569?diff=split#diff-6e035ac69f80793b66b1bced3d686fa9L86",
                    "lines": [
                      {
                        "line": "@app.route('/<reponame>/comment', methods=['POST'])",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "def comment(reponame):",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "    comment = request.form.get('comment')",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    add_comment(reponame, comment)",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return redirect(\"/{0}\".format(reponame))",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return redirect(url_for('heso', reponame=reponame))",
                        "lineNumber": 89,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cyverse/troposphere/commit/1ee2795be8b07a2748041703816c8265f983036c?diff=split#diff-a10c0b269ce1223db8986e34d0238d90L77",
                    "lines": [
                      {
                        "line": "\"\"\"",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "logger.debug('GET Variables:%s' % request.args)",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "sendback = request.args.get('sendback', None)",
                        "lineNumber": 76,
                        "lineChange": "removed"
                      },
                      {
                        "line": "sendback = request.args.get('sendback', '')",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "ticket = request.args.get('ticket', None)",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "if not ticket:",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "     abort(400)",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "sendback = url_for('cas_service_validator', sendback=sendback)",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "try:",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "    user = get_cas_client().validate_ticket(ticket, sendback)",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "except InvalidTicket:",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return redirect(url_for('application'))",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "    token = get_oauth_client().generate_access_token(user)",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    logger.debug(\"TOKEN: \" + token)",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return redirect(sendback)",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "except Unauthorized:",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    abort(403)",
                        "lineNumber": 100,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Clinical-Genomics/scout/commit/2141b864ea039feaae1cec3429c88d1a17be5801?diff=split#diff-f4713da81a28f79fa0cfd44ca3c75023L24",
                    "lines": [
                      {
                        "line": "if request.method == 'POST':",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "   # update an existing panel",
                        "lineNumber": 21,
                        "lineChange": "added"
                      },
                      {
                        "line": "csv_file = request.files['csv_file']",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except ValueError as error:",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        flash(error.args[0], 'warning')",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return redirect(request.referrer)",
                        "lineNumber": 37,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    store.add_gene_panel(panel_obj)",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    flash(\"new gene panel added: {}\".format(panel_obj['panel_name']), 'info')",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    lines = csv_file.stream.read().decode('windows-1252').split('\\r')",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "    panel_obj = controllers.update_panel(store, request.form['panel_name'], lines)",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return redirect(url_for('panels.panel', panel_id=panel_obj['_id']))",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "institutes = list(user_institutes(store, current_user))",
                        "lineNumber": 27,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 298,
                "cwe": [
                  "CWE-601"
                ]
              }
            },
            {
              "id": "python/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "XSS",
                  "Security",
                  "SourceRequestUrl",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/googleapis/oauth2client/commit/1c56925cbc83b9dd8a5112a60e62e0aa73a33b5f?diff=split#diff-e4d128b4bf6c347d924bafe9df665fc2L96",
                    "lines": [
                      {
                        "line": "def oauth2_callback(request):",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \"\"\" View that handles the user's return from OAuth2 provider.",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "     A redirect response back to the return_url.",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\"\"\"",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "if 'error' in request.GET:",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    reason = request.GET.get(",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'error_description', request.GET.get('error', ''))",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "    reason = html.escape(reason)",
                        "lineNumber": 113,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return http.HttpResponseBadRequest(",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'Authorization failed {0}'.format(reason))",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "try:",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    encoded_state = request.GET['state']",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    code = request.GET['code']",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "except KeyError:",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return http.HttpResponseBadRequest(",
                        "lineNumber": 121,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/miguelgrinberg/flasky-first-edition/commit/57f3cb9449c3f8f45454059340c2934fbda33593?diff=split#diff-8d35108ffe2ad173a697734a3e9938e1L15",
                    "lines": [
                      {
                        "line": "@app.route('/user/<name>')",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "def user(name):",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return '<h1>Hello, %s!</h1>' % name",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return render_template('user.html', name=name)",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/miguelgrinberg/flasky/commit/e55fc2f5f6eba0c73bcdc3fa5c1608d9643a7340?diff=split#diff-8d35108ffe2ad173a697734a3e9938e1L15",
                    "lines": [
                      {
                        "line": "@app.route('/user/<name>')",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "def user(name):",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return '<h1>Hello, %s!</h1>' % name",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    return render_template('user.html', name=name)",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 709,
                "cwe": [
                  "CWE-79"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/OR",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into flask.redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[flask.redirect](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 16,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df2a5f8d292c1684685645272fb8138ad2433e135de0655ee7a30fe5c22f17e6",
            "1": "8a30cfc6.993139d5.a406b245.b6661f3a.1d07cee4.ba14daf2.0a7337bb.8794408a.2d06e3d6.5eca9450.a406b245.72f42ae3.25ac000c.ba14daf2.9021fcd8.8794408a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 15,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 15,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 15,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 15,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 9,
                            "endColumn": 73
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 25,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 617,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/OR",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into flask.redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[flask.redirect](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 131,
                  "endLine": 131,
                  "startColumn": 12,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "899b3c63e11775e1b4daa343f469437cdae9b1d5776831623a36fb082e0f8329",
            "1": "8a30cfc6.993139d5.a406b245.b6661f3a.cc857d4e.ba14daf2.0a7337bb.ebed174f.2d06e3d6.993139d5.a406b245.b6661f3a.42a20936.ba14daf2.ddedfe68.100d6fba"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 20,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 20,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 129,
                            "startColumn": 5,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 21,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/openid_blueprint/openid_blueprint.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 12,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 617,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "python/XSS",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the request URL flows into flask.make_response, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[the request URL](0)",
              "[flows](1),(2),(3)",
              "[flask.make_response](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/spiffworkflow_backend/routes/debug_controller.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "startColumn": 12,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f89c74781c94e80e37a6efb5ba48890faa09490b67fd5b8bfbe456ec115791e2",
            "1": "1f97d6e2.dc9d8d3e.2683ade8.139c59a8.42a20936.ba14daf2.0a7337bb.03cfff60.54b88e7c.dc9d8d3e.2683ade8.35633f27.00d2cc00.255d6950.9196a908.03cfff60"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/debug_controller.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 34,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/debug_controller.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 34,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/debug_controller.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 27,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/debug_controller.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 26,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/spiffworkflow_backend/routes/debug_controller.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 12,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 784,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 257,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}
