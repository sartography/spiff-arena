#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail


user_file_with_one_email_per_line="${1:-}"
if [[ -z "${1:-}" ]]; then
  >&2 echo "usage: $(basename "$0") [user_file_with_one_email_per_line] [--replace_all_passwords - optional]"
  exit 1
fi

replace_all_passwords=""
if grep -q '\-\-replace_all_passwords\>' <<<"$@" ; then
  replace_all_passwords='true'
fi

first_line_processed="false"

generator_command=xkcdpass
if ! command -v "$generator_command" >/dev/null; then
  generator_command=uuidgen
fi

user_file_tmp="/tmp/$(basename "$user_file_with_one_email_per_line")"
cp "$user_file_with_one_email_per_line" "$user_file_tmp"

while read -r input_line; do
  if ! grep -qE '^#' <<<"$input_line" ; then
    if [[ "$first_line_processed" == "false" ]]; then
      first_line_processed=true
    else
      user_email=$(awk -F ',' '{print $1}' <<<"$input_line")
      username=$(awk -F '@' '{print $1}' <<<"$user_email")
      password=$(awk -F ',' '{print $2}' <<<"$input_line")
      if [[ -z "$password" ]]; then
        new_password=$($generator_command)
        perl -pi -e "s/(${username}@[^,]+,)(,.*)/\1${new_password}\2/" "$user_file_tmp"
      elif [[ -n "$replace_all_passwords" ]]; then
        new_password=$($generator_command)
        perl -pi -e "s/(${username}@[^,]+,)[^,]+(,.*)/\1${new_password}\2/" "$user_file_tmp"
      fi
    fi
  fi
done <"$user_file_with_one_email_per_line"

mv "$user_file_tmp" "$user_file_with_one_email_per_line"
